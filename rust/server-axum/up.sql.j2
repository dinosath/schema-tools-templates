{# type=models,filename=migrations/00000000000001_initial_setup/up.sql,min_version=0.5.0 #}
{% import "macros.j2" as m -%}

{% for model in models %}
{%- if model.object %}
CREATE TABLE IF NOT EXISTS {{ m::model_name(name = model.object.name) | snakecase }} (
  
  {%- set filtered_properties = model.object.properties | filter_not(attribute="type", value="const") -%}


  {% for property in model.object.properties %}
  {{ property.name }} {{ self::get_sql_type(property=property) }} {{ self::property_is_unique(property=property) }}  {{ self::property_is_nullable(property=property) }} 
  {% endfor %}


);

{% endif %}
{% endfor %}


{% macro property_is_nullable(property) %}{% filter nospaces %}
{% if property.nullable != true %}
NOT NULL
{% endif %}
{% endfilter %}{% endmacro get_sql_type %}

{% macro property_is_unique(property) %}{% filter nospaces %}
{% if property.nullable != true %}
UNIQUE
{% endif %}
{% endfilter %}{% endmacro get_sql_type %}


{% macro check_for_id(model) %}{% filter nospaces %}
  {{ model.object.properties | json_encode() }}
  {% if model.object.properties in "id" %}
  id BIGSERIAL PRIMARY KEY,
  {% endif %}
{% endfilter %}{% endmacro get_sql_type %}


{% macro get_sql_type(property) %}{% filter nospaces %}
{% if property.type == "string" %}
    {% if property.validation and property.validation.format and property.validation.format == "uuid" %}
    UUID
    {% elif property.validation and property.validation.format and property.validation.format == "date-time" %}
    TIMESTAMPTZ
    {% else %}
    VARCHAR
    {% endif %}
{% elif property.type == "boolean" %}
    BOOLEAN
{% elif property.type == "integer" and property.validation.minimum | default(value = -1) >= 0 %}
    BIGINT
{% elif property.type == "integer" %}
    INT
{% elif property.type == "number" %}
    f64
{% elif property.type == "any" %}
    serde_json::Value
{% elif property.type == "array" and property.model %}
    Vec<>
{% elif property.type == "map" and property.model %}
    BTreeMap<String>
{% elif property.type == "object" and property.model %}
    
{% elif property.type == "wrapper" and property.model %}
    
{% elif property.type == "enum" and property.model %}
    
{% endif %}
{% endfilter %}{% endmacro get_sql_type %}


{% macro input(label, type="text") %}
    <label>
        {{ label }}
        <input type="{{type}}" />
    </label>
{% endmacro input %}
