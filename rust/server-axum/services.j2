{# type=models,filename=src/services.rs,min_version=0.5.0 #}
{%- import "macros.j2" as m -%}
{%- import "extra.j2" as e -%}
{{ m::do_not_modify() }}

use axum::{
    body::{Body, HttpBody},
    extract::{FromRequest, State, Path},
    handler::{future::IntoServiceFuture, Handler},
    http::Request,
    http::{request::Parts, StatusCode},
    response::{Json, IntoResponse, Response},
    routing::{self, on_service, MethodFilter},
    Router, BoxError,
};
use futures::{future::LocalBoxFuture, Future};
use std::{
    convert::Infallible,
    marker::PhantomData,
    pin::Pin,
    task::{Context, Poll},
};
use diesel_async::{
    pooled_connection::AsyncDieselConnectionManager, AsyncPgConnection, RunQueryDsl,
};
use crate::Pool;
use crate::internal_error;
use crate::models::{*};
use diesel::QueryDsl;
use diesel::SelectableHelper;
use diesel::ExpressionMethods;
use serde_json::json;
{%- for model in models %}
{%- set model_name = model.object.name %}
{%- set table_name = model_name | plural | lower %}
use crate::schema::{{ table_name }}::dsl::*;
{%- if not options.skipModels or options.skipModels and not model_name in options.skipModels %}
pub async fn list_{{ model_name | plural | lower }}(State(pool): State<Pool>) -> Result<Json<Vec<{{model.object.name}}>>, (StatusCode, String)> {
    let mut conn = pool.get().await.map_err(internal_error)?;

    let res = {{ table_name }}
        .select({{ model_name }}::as_select())
        .load(&mut conn)
        .await
        .map_err(internal_error)?;
    Ok(Json(res))
}

pub async fn create_{{ model_name | lower }}(State(pool): State<Pool>, Json(new_value): Json<{{ model_name }}Dto>) -> Result<Json<{{model.object.name}}>, (StatusCode, String)> {
    let mut conn = pool.get().await.map_err(internal_error)?;

    let res = diesel::insert_into({{ table_name }})
        .values(new_value)
        .returning({{ model_name }}::as_returning())
        .get_result(&mut conn)
        .await
        .map_err(internal_error)?;
    Ok(Json(res))
}

pub async fn get_{{ model_name | lower }}(State(pool): State<Pool>,Path(element_id): Path<i64>) -> Result<Json<{{ model.object.name }}>, (StatusCode, String)> {
    let mut conn = pool.get().await.map_err(internal_error)?;

    let res = {{ table_name }}
        .find(element_id)
        .select({{ model_name }}::as_select())
        .first(&mut conn)
        .await
        .map_err(internal_error)?;

    Ok(Json(res))
}

pub async fn update_{{ model_name | lower }}(State(pool): State<Pool>,Path(element_id): Path<i64>, Json(new_value): Json<{{ model_name }}>) -> Result<Json<serde_json::Value>, (StatusCode, String)> {
    let mut conn = pool.get().await.map_err(internal_error)?;
    let res = diesel::update({{ table_name }})
        .filter(id.eq(element_id))
        .set(new_value)
        .execute(&mut conn)
        .await
        .map_err(internal_error)?;
        Ok(Json(json!({})))
}

pub async fn partial_update_{{ model_name | lower }}(State(pool): State<Pool>,Path(element_id): Path<i64>, Json(new_value): Json<{{ model_name }}>) -> Result<Json<serde_json::Value>, (StatusCode, String)> {
    let mut conn = pool.get().await.map_err(internal_error)?;
    let res = diesel::update({{ table_name }})
        .set(new_value)
        .execute(&mut conn)
        .await
        .map_err(internal_error)?;
        Ok(Json(json!({})))
}

pub async fn delete_{{ model_name | lower }}(State(pool): State<Pool>,Path(element_id): Path<i64>) -> Result<Json<serde_json::Value>, (StatusCode, String)> {
    let mut conn = pool.get().await.map_err(internal_error)?;

    diesel::delete({{ table_name }})
        .filter(id.eq(element_id))
        .execute(&mut conn)
        .await
        .map_err(internal_error)?;
        Ok(Json(json!({})))
}

{%- endif %}
{% endfor %}