{# type=models,filename=src/main.rs,min_version=0.5.0 #}
{%- import "macros.j2" as m -%}
{%- import "extra.j2" as e -%}
extern crate dotenv;
use axum::{
    async_trait,
    extract::{FromRef, FromRequestParts, State},
    http::{request::Parts, StatusCode},
    response::Json,
    routing::{get, post, delete, put, patch},
    Router,
};
use tokio::net::TcpListener;
use diesel::prelude::*;
use diesel_async::{
    pooled_connection::AsyncDieselConnectionManager, AsyncPgConnection, RunQueryDsl,
};
use tracing_subscriber::{layer::SubscriberExt, util::SubscriberInitExt};
use dotenv::dotenv;
use std::env;

mod models;
mod schema;
mod grpc_services;
mod rest_services;

#[tokio::main]
async fn main() {
    dotenv().ok();
    tracing_subscriber::registry()
        .with(
            tracing_subscriber::EnvFilter::try_from_default_env()
                .unwrap_or_else(|_| "example_diesel_async_postgres=debug".into()),
        )
        .with(tracing_subscriber::fmt::layer())
        .init();

    let db_url = env::var("DATABASE_URL").unwrap_or("localhost:5432".to_string());


    let config = AsyncDieselConnectionManager::<diesel_async::AsyncPgConnection>::new(db_url);
    let pool = bb8::Pool::builder().build(config).await.unwrap();

    let app = Router::new()
        .route("/", get(root))
        {% for model in models %}
        {%- set model_name = model.object.name %}
        {%- if not options.skipModels or options.skipModels and not model_name in options.skipModels %}
        .route("/{{ model_name | plural | camelcase }}",get(rest_services::list_{{ model_name | plural | lower }}))
        .route("/{{ model_name | plural | camelcase }}",post(rest_services::create_{{ model_name | lower }}))
        .route("/{{ model_name | plural | camelcase }}/:id",get(rest_services::get_{{ model_name | lower }}))
        .route("/{{ model_name | plural | camelcase }}/:id",put(rest_services::update_{{ model_name | lower }}))
        .route("/{{ model_name | plural | camelcase }}/:id",patch(rest_services::partial_update_{{ model_name | lower }}))
        .route("/{{ model_name | plural | camelcase }}/:id",delete(rest_services::delete_{{ model_name | lower }}))
        {%- endif %}
        {%- endfor %}
        .with_state(pool);


    let port = std::env::var("HTTP_PORT").unwrap_or("3000".to_string()).parse::<u16>().unwrap();
    let listener = TcpListener::bind(format!("0.0.0.0:{}",port)).await.unwrap();
    axum::serve(listener, app).await.unwrap();
}

type Pool = bb8::Pool<AsyncDieselConnectionManager<AsyncPgConnection>>;
struct DatabaseConnection(
    bb8::PooledConnection<'static, AsyncDieselConnectionManager<AsyncPgConnection>>,
);

#[async_trait]
impl<S> FromRequestParts<S> for DatabaseConnection
where
    S: Send + Sync,
    Pool: FromRef<S>,
{
    type Rejection = (StatusCode, String);

    async fn from_request_parts(_parts: &mut Parts, state: &S) -> Result<Self, Self::Rejection> {
        let pool = Pool::from_ref(state);

        let conn = pool.get_owned().await.map_err(internal_error)?;

        Ok(Self(conn))
    }
}

fn internal_error<E>(err: E) -> (StatusCode, String)
where
    E: std::error::Error,
{
    (StatusCode::INTERNAL_SERVER_ERROR, err.to_string())
}



// basic handler that responds with a static string
async fn root() -> &'static str {
    "Hello, World!"
}
