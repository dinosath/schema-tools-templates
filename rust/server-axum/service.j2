{# type=tags,filename=api/service.rs,min_version=0.5.0 #}
{%- import "macros.j2" as m -%}
{%- import "extra.j2" as e -%}
{{ m::do_not_modify() }}

use axum::{
    body::{Body, BoxBody, HttpBody},
    extract::{FromRequest, RequestParts},
    handler::{future::IntoServiceFuture, Handler},
    http::Request,
    response::{IntoResponse, Response},
    routing::{self, on_service, MethodFilter},
    Router, BoxError,
};
use futures::{future::LocalBoxFuture, Future};
use std::{
    convert::Infallible,
    marker::PhantomData,
    pin::Pin,
    task::{Context, Poll},
};
use tower_service::Service;

{% set_global qs = options.qs | default(value = "serde_urlencoded") %}
macro_rules! all_the_tuples {
    ($name:ident) => {
        $name!(T1);
        $name!(T1, T2);
        $name!(T1, T2, T3);
        $name!(T1, T2, T3, T4);
        $name!(T1, T2, T3, T4, T5);
	}
}

{% for tag in tags %}
/// {{ tag.tag }} router
pub struct {{ tag.tag | pascalcase }}Router {
	router: Router,
}

impl {{ tag.tag | pascalcase }}Router {
	pub fn new() -> Self {
		Self {
			router: Router::new()
		}
	}

	{% for endpoint in tag.endpoints %}
    /// {{ endpoint.method | upper }} {{ endpoint.path }}
	pub fn {{ endpoint.operation | snakecase }}<H, T>(mut self, handler: H) -> Self
        where
            H: {{ endpoint.operation | pascalcase }}Handler<T>,
            T: 'static
	{
        self.router = self.router.route("{{ endpoint.path | replace(from="{", to=":") | replace(from="}", to="") }}", on_service(MethodFilter::{{ endpoint.method | upper }}, {{ endpoint.operation | pascalcase }}Service::new(handler)));

		self
	}
	{% endfor %}
}

impl Into<Router> for {{ tag.tag | pascalcase }}Router {
	fn into(self) -> Router {
        self.router
    }
}

{% for endpoint in tag.endpoints %}
{%- set skipped_headers = e::skipped_headers(endpoint=endpoint, options=options) | split(pat=" ") %}
{%- set filtered_headers = endpoint.parameters.header | filter_not_inarray(attribute="name", values=skipped_headers) %}
/// {{ endpoint.method | upper }} {{ endpoint.path }} handler
pub trait {{ endpoint.operation | pascalcase }}Handler<T, B = Body>: Clone + Send + Sized + 'static {
	fn call(
        self,
        req: Request<B>,
    ) -> Pin<Box<dyn Future<Output = Response> + Send + 'static>>;
}

impl<F, Fut, B> {{ endpoint.operation | pascalcase }}Handler<(), B> for F
where
    F: FnOnce({{ e::endpoint_parameters(endpoint = endpoint) }}) -> Fut + Clone + Send + 'static,
    Fut: Future + Send,
	Fut::Output: Into<super::endpoint::{{ endpoint.operation | pascalcase }}Response>,
	{% if endpoint.requestbody.models.default -%}
	B: HttpBody + Send + 'static,
    B::Data: Send,
    B::Error: Into<BoxError>,
	{% else %}
    B: Send + 'static,
	{% endif %}
{
	fn call(
        self,
        req: Request<B>,
    ) -> Pin<Box<dyn Future<Output = Response> + Send + 'static>> {
		Box::pin(async move {
			let mut req = RequestParts::new(req);
			
{{ e::handler_definition_body(endpoint = endpoint, qs = qs, filtered_headers = filtered_headers)}}

			let res = self(
				{%- filter trim_start_matches(pat=", ") -%}
				{{ e::handler_definition_parameters(endpoint = endpoint, qs = qs, filtered_headers = filtered_headers)}}, {% endfilter -%}
			).await;

			let response: super::endpoint::{{ endpoint.operation | pascalcase }}Response = res.into();

			response.into()
		})
	}
}

macro_rules! {{ endpoint.operation | snakecase }}_handler {
    ( $($ty:ident),* $(,)? ) => {
        #[allow(non_snake_case)]
        impl<F, Fut, B, $($ty,)*> {{ endpoint.operation | pascalcase }}Handler<($($ty,)*), B> for F
        where
			F: FnOnce({{ e::endpoint_parameters(endpoint = endpoint) }}$($ty,)*) -> Fut + Clone + Send + 'static,
			Fut: Future + Send,
			Fut::Output: Into<super::endpoint::{{ endpoint.operation | pascalcase }}Response>,
			{%- if endpoint.requestbody.models.default -%}
			B: HttpBody + Send + 'static,
			B::Data: Send,
			B::Error: Into<BoxError>,
			{%- else %}
			B: Send + 'static,
			{%- endif %}
            $( $ty: FromRequest<B> + Send,)*
        {
            fn call(self, req: Request<B>) -> Pin<Box<dyn Future<Output = Response> + Send + 'static>> {
                Box::pin(async move {
                    let mut req = RequestParts::new(req);

					{{ e::handler_definition_body(endpoint = endpoint, qs = qs, filtered_headers = filtered_headers)}}

                    $(
                        let $ty = match $ty::from_request(&mut req).await {
                            Ok(value) => value,
                            Err(rejection) => return rejection.into_response(),
                        };
                    )*

                    let res = self({%- filter trim_start_matches(pat=", ") -%}
						{{ e::handler_definition_parameters(endpoint = endpoint, qs = qs, filtered_headers = filtered_headers)}}, {% endfilter -%}
						$($ty,)*).await;

					let response: super::endpoint::{{ endpoint.operation | pascalcase }}Response = res.into();

					response.into()
                })
            }
        }
    };
}

all_the_tuples!({{ endpoint.operation | snakecase }}_handler);

/// {{ endpoint.method | upper }} {{ endpoint.path }} service 
struct {{ endpoint.operation | pascalcase }}Service<H, T, B>
where
	H: {{ endpoint.operation | pascalcase }}Handler<T, B> {
	handler: H,
	_marker: PhantomData<fn() -> (T, B)>,
}

impl<H, T, B> Clone for {{ endpoint.operation | pascalcase }}Service<H, T, B>
where
    H: {{ endpoint.operation | pascalcase }}Handler<T, B>
{
    fn clone(&self) -> Self {
        Self {
            handler: self.handler.clone(),
            _marker: PhantomData,
        }
    }
}

impl<H, T, B> {{ endpoint.operation | pascalcase }}Service<H, T, B>
where
	H: {{ endpoint.operation | pascalcase }}Handler<T, B> {
	pub fn new(handler: H) -> Self {
		Self {
			handler,
			_marker: PhantomData,
		}
	}
}

impl<H, T, B> Service<Request<B>> for {{ endpoint.operation | pascalcase }}Service<H, T, B>
where
	H: {{ endpoint.operation | pascalcase }}Handler<T, B>,
    B: Send + 'static {
    type Response = Response;
    type Error = Infallible;
    type Future = Pin<Box<dyn Future<Output = Result<Self::Response, Self::Error>> + Send + 'static>>;

    #[inline]
    fn poll_ready(&mut self, _cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>> {
        Poll::Ready(Ok(()))
    }

    fn call(&mut self, req: Request<B>) -> Self::Future {
        let handler = self.handler.clone();
		Box::pin(async move {
            Ok( {{ endpoint.operation | pascalcase }}Handler::call(handler, req).await)
        })
    }
}

{% endfor %}
{% endfor %}