{# type=tags,filename=src/api/service.rs,min_version=0.5.0 #}
{%- import "macros.j2" as m -%}
{%- import "extra.j2" as e -%}
{{ m::do_not_modify() }}

use axum::{
    body::{Body, BoxBody, HttpBody},
    extract::{FromRequest},
    handler::{future::IntoServiceFuture, Handler},
    http::Request,
    response::{IntoResponse, Response},
    routing::{self, on_service, MethodFilter},
    Router, BoxError,
};
use futures::{future::LocalBoxFuture, Future};
use std::{
    convert::Infallible,
    marker::PhantomData,
    pin::Pin,
    task::{Context, Poll},
};

{% for tag in tags %}
{% for endpoint in tag.endpoints %}

async fn {{ endpoint.operation | pascalcase }}(State(pool): State<Pool>,Json(new_user): Json<NewUser>,) -> Result<Json<User>, (StatusCode, String)> {
    let mut conn = pool.get().await.map_err(internal_error)?;

    let res = diesel::insert_into(users::table)
        .values(new_user)
        .returning(User::as_returning())
        .get_result(&mut conn)
        .await
        .map_err(internal_error)?;
    Ok(Json(res))
}

    impl {{ tag.tag | pascalcase }}Router {
	pub fn new() -> Self {
		Self {
			router: Router::new()
		}
	}

	pub fn {{ endpoint.operation | snakecase }}<H, T>(mut self, handler: H) -> Self
        where
            H: {{ endpoint.operation | pascalcase }}Handler<T>,
            T: 'static
	{
        self.router = self.router.route("{{ endpoint.path | replace(from="{", to=":") | replace(from="}", to="") }}", on_service(MethodFilter::{{ endpoint.method | upper }}, {{ endpoint.operation | snakecase }}Service::new(handler)));

		self
	}
	{% endfor %}
}

impl Default for {{ tag.tag | pascalcase }}Router {
    fn default() -> Self {
        Self::new()
    }
}

impl From<{{ tag.tag | pascalcase }}Router> for Router {
    fn from(r: {{ tag.tag | pascalcase }}Router) -> Self {
        r.router
    }
}

{% for endpoint in tag.endpoints %}
{%- set skipped_headers = e::skipped_headers(endpoint=endpoint, options=options) | split(pat=" ") %}
{%- set filtered_headers = endpoint.parameters.header | filter_not_inarray(attribute="name", values=skipped_headers) %}
/// {{ endpoint.method | upper }} {{ endpoint.path }} handler
pub trait {{ endpoint.operation | pascalcase }}Handler<T, B = Body>: Clone + Send + Sized + 'static {
	fn call(
        self,
        req: Request<B>,
    ) -> Pin<Box<dyn Future<Output = Response> + Send + 'static>>;
}


all_the_tuples!({{ endpoint.operation | snakecase }}_handler);

/// {{ endpoint.method | upper }} {{ endpoint.path }} service 
struct {{ endpoint.operation | pascalcase }}Service<H, T, B>
where
	H: {{ endpoint.operation | pascalcase }}Handler<T, B> {
	handler: H,
	_marker: PhantomData<fn() -> (T, B)>,
}

impl<H, T, B> Clone for {{ endpoint.operation | pascalcase }}Service<H, T, B>
where
    H: {{ endpoint.operation | pascalcase }}Handler<T, B>
{
    fn clone(&self) -> Self {
        Self {
            handler: self.handler.clone(),
            _marker: PhantomData,
        }
    }
}

impl<H, T, B> {{ endpoint.operation | pascalcase }}Service<H, T, B>
where
	H: {{ endpoint.operation | pascalcase }}Handler<T, B> {
	pub fn new(handler: H) -> Self {
		Self {
			handler,
			_marker: PhantomData,
		}
	}
}

impl<H, T, B> Service<Request<B>> for {{ endpoint.operation | pascalcase }}Service<H, T, B>
where
	H: {{ endpoint.operation | pascalcase }}Handler<T, B>,
    B: Send + 'static {
    type Response = Response;
    type Error = Infallible;
    type Future = Pin<Box<dyn Future<Output = Result<Self::Response, Self::Error>> + Send + 'static>>;

    #[inline]
    fn poll_ready(&mut self, _cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>> {
        Poll::Ready(Ok(()))
    }

    fn call(&mut self, req: Request<B>) -> Self::Future {
        let handler = self.handler.clone();
		Box::pin(async move {
            Ok( {{ endpoint.operation | pascalcase }}Handler::call(handler, req).await)
        })
    }
}

{% endfor %}
{% endfor %}