{# type=tags,filename=%options.namespace%/endpoint.rs,min_version=0.2.0 #}
{%- import "macros.j2" as m -%}
{% import "extra.j2" as e -%}
{{ m::do_not_modify() }}
use serde::{de::{self, IntoDeserializer}, Deserialize};
use std::fmt;
use reqwest::header::{HeaderName, HeaderValue};
use super::{ClientError, ApiError};
use std::future::Future;
use std::pin::Pin;

{% for tag in tags %}
{% set allowed_operations = e::allowed_operations(endpoints=tag.endpoints, options=options) | split(pat=" ") %}
{% set filtered_endpoints = tag.endpoints | filter_inarray(attribute="operation", values=allowed_operations) %}
{% for endpoint in filtered_endpoints %}
//
// {{ endpoint.method }} {{ endpoint.path }}
//
#[derive(Debug, PartialEq)]
pub enum {{ endpoint.operation | pascalcase }}Error {
	{% for response in endpoint.responses.all  %}
    {% if response != endpoint.responses.success %}
	Error{{ response.statusCode }}({{ m::type(property = response.models.default.model, ns = "super::model") }}),
    {% endif %}
	{% endfor %}
}

impl ApiError for {{ endpoint.operation | pascalcase }}Error {
	fn extract(response: reqwest::Response) -> Pin<Box<dyn Future<Output = Option<Self>> + Send>> {
		Box::pin(async move {
			match response.status().as_u16() {
				{% for response in endpoint.responses.all  %}
				{% if response != endpoint.responses.success %}
				{{ response.statusCode }} => response.json::<{{ m::type(property = response.models.default.model, ns = "super::model") }}>()
					.await
					.map(Self::Error{{ response.statusCode }})
					.ok(),
				{% endif %}
				{% endfor %}
				_ => None
			}
		})
	}
}

{% set skipped_headers = e::skipped_headers(endpoint=endpoint, options=options) | split(pat=" ") %}
{% set filtered_headers = endpoint.parameters.header | filter_not_inarray(attribute="name", values=skipped_headers) %}

{%- if filtered_headers | length > 0 %}
pub struct {{ endpoint.operation | pascalcase }}Headers{
	{%- for q in filtered_headers %}
	pub {{ m::property_name(name = q.name) }}: {% if not q.required %}Option<{% endif %}{{ m::type(property = q.model, ns = "super::model") }}{% if not q.required %}>{% endif %},
	{% endfor -%}
}

impl {{ endpoint.operation | pascalcase }}Headers {
	pub fn into_vec(self) -> Vec<(HeaderName, HeaderValue)> {
		vec![
			{%- for q in filtered_headers %}
			{% if q.required %}
			Some((HeaderName::from_static("{{ q.name }}"), HeaderValue::from_bytes(self.{{ m::property_name(name = q.name) }}.as_ref()).unwrap())),
			{% else %}
			self.{{ m::property_name(name = q.name) }}.map(|v| (HeaderName::from_static("{{ q.name }}"), HeaderValue::from_str({{ m::to_str(q = q.model, required = q.required, name = 'v') }}).unwrap())),
			{% endif %}
			{% endfor -%}
		]
		.iter()	
		.filter_map(|f| f.clone())
		.collect::<Vec<_>>()
	}
}
{% endif %}

{% if not endpoint.responses.success.models %}
#[derive(Debug)]
pub struct {{ endpoint.operation | pascalcase }}Response{
	pub response: reqwest::Response, 
}

impl {{ endpoint.operation | pascalcase }}Response{
	pub fn from_response(response: reqwest::Response) -> Self {
		Self {
			response
		}
	}
}
{% endif %}

{%- if endpoint.parameters.query | length > 0 %}
pub struct {{ endpoint.operation | pascalcase }}Query{
	{%- for q in endpoint.parameters.query %}
	pub {{ m::property_name(name = q.name) }}: {% if not q.required %}Option<{% endif %}{% if q.model %}{{ m::type(property = q.model, ns = "super::model") }}{% elif q.model.enum %}{{ m::type(property = q.model.enum, ns = "super::model") }}{% endif %}{% if not q.required %}>{% endif %},
	{% endfor -%}
}

impl {{ endpoint.operation | pascalcase }}Query {
	pub fn into_vec(self) -> Vec<(String, String)> {
		let mut parameters = vec![
			{%- for q in endpoint.parameters.query | filter(attribute="required", value=true) | filter_not(attribute="style", value="deepObject") %}
			(
				"{{ q.name }}".to_string(),
				self.{{ m::to_string(q = q.model, required = true, name = m::property_name(name = q.name)) }}
			),
			{% endfor -%}
		];

		{%- for q in endpoint.parameters.query | filter(attribute="required", value=false) | filter_not(attribute="style", value="deepObject") %}
		if let Some(param) = self.{{ m::property_name(name = q.name) }} {
			parameters.push(("{{ q.name }}".to_string(), {{ m::to_string(q = q.model, required = q.model.required, name = 'param') }}));
		}
		{%- endfor -%}

		{%- for q in endpoint.parameters.query | filter(attribute="style", value="deepObject") %}
		{%- if q.required %}
		parameters.append(&mut self.{{ m::property_name(name = q.name) }}.to_parameters("{{ q.name }}"));
		{% else %}
		if let Some(param) = self.{{ m::property_name(name = q.name) }} {
			parameters.append(&mut param.to_parameters("{{ q.name }}"));
		}
		{%- endif %}
		{%- endfor %}

		parameters
	}
}

{% endif %}
{% endfor %}
{% endfor %}