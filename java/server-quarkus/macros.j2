{% macro property_name(property) %}{% filter nospaces %}

    {% if property.type == "array"%}
    {% set name = property.name | plural  -%}
    {% else %}
    {% set name = property.name -%}
    {% endif %}

    {{ name | replace(from="-", to="") | camelcase }}

    {% if name | camelcase in [
        "false", "fn", "for", "if", "impl", "in", "let", "loop", "match", "mod", "move",
        "mut", "pub", "ref", "return", "self", "static", "struct", "super", "trait",
        "true", "type", "unsafe", "use", "where", "while", "async", "await", "dyn",
        "abstract", "become", "box", "do", "final", "macro", "override", "priv", "typeof",
        "unsized", "virtual", "yield", "try"
    ] %}_{% endif %}
{% endfilter %}{% endmacro property_name %}

{% macro has_format(format, models) -%}
{% for model in models | filter(attribute="object") -%}
{% for property in model.object.properties -%}
{% if property.validation and property.validation.format and property.validation.format == format %}1{% endif %}
{%- endfor %}
{%- endfor %}
{%- endmacro has_format %}

{% macro model_name(name) %}{% filter nospaces %}
    {{ name  }}
{% endfilter %}{% endmacro model_name %}

{%- macro filtered_properties(model) -%}
{% if model.object -%}
{{ model.object.properties | filter_not(attribute="type", value="const") }}
{% else %}
{{[]}}
{% endif %}
{% endmacro filtered_properties %}

{% macro model_imports(model,package) -%}
{% if model.object -%}
import jakarta.persistence.Entity;
{% for property in model.object.properties -%}
{% if property.type == "array" and property.model -%}
import java.util.List;
{% elif property.type == "string" and property.validation and property.validation.format and property.validation.format == "date-time" %}
import java.time.LocalDateTime;
{% elif property.type == "string" and property.validation and property.validation.format and property.validation.format == "date" %}
import java.time.LocalDate;
{% endif -%}
{% endfor -%}
{% endif -%}
{% endmacro model_imports %}

{% macro has_id(model) %}{% filter nospaces %}
{% set has_id = false %}
{% if model.object -%}
{% for property in model.object.properties -%}
{% if property.name == "id" -%}
true
{% endif %}
{% endfor -%}
{% endif %}
{% endfilter %}{% endmacro has_id %}

{% macro get_id_property(model) %}{% filter nospaces %}
{% if model.object -%}
{% for property in model.object.properties -%}
{% if property.name == "id" -%}
{{ property }}
{% endif %}
{% endfor -%}
{% endif %}
{% endfilter %}{% endmacro get_id_property %}

{% macro get_id_property_type(model) %}{% filter nospaces %}
{% endfilter %}{% endmacro get_id_property_type %}

{% macro id_type(model) %}{% filter nospaces %}
{% if model.object -%}
{% for property in model.object.properties -%}
{% if property.name == "id" -%}
{{ self::type(model=property) | title }}
{% endif %}
{% endfor -%}
{% endif %}
{% endfilter %}{% endmacro has_id %}


{% macro response_type(endpoint) %}{% filter nospaces %}
{% if endpoint.responses.success %}
{% if endpoint.responses.success.models.default.model.type=='object'  %}
{{ endpoint.responses.success.models.default.model.model.name }}
{% elif endpoint.responses.success.models.default.model.type=='array' %}
List<{{ endpoint.responses.success.models.default.model.model.model.name }}>
{% else %}
{{ endpoint.responses.success.models.default.model.type | camelcase | title }}
{% endif %}
{% else %}
void
{% endif %}
{% endfilter %}{% endmacro response_type %}

{%- macro request_body_type(endpoint) -%}{% filter nospaces %}
{%- if endpoint.requestbody -%}
{%- if endpoint.requestbody.models.default.model.type=="object" -%}
{{ endpoint.requestbody.models.default.model.model.type }}
{%- elif endpoint.requestbody and endpoint.requestbody.models.default.model.type=="array" -%}
{{ endpoint.requestbody.models.default.model.model.model.type }}
{%- endif -%}
{%- endif -%}
{% endfilter %}{%- endmacro request_body_type_string -%}


{%- macro request_body_parameter(endpoint) -%}{% filter trim %}
{%- set body = self::request_body_type(endpoint=endpoint) -%}
{% if not body=="" %}@Valid{% endif %} {{ body }} {{ body | camelcase }}
{% endfilter %}{%- endmacro request_body_parameter -%}

{%- macro request_body_type_string(endpoint) -%}{% filter nospaces %}
{%- if endpoint.requestbody -%}
{%- if endpoint.requestbody.models.default.model.type=="object" -%}
{{ endpoint.requestbody.models.default.model.model.type }}
{%- elif endpoint.requestbody and endpoint.requestbody.models.default.model.type=="array" -%}
{{ endpoint.requestbody.models.default.model.model.model.type }}
{%- endif -%}
{%- endif -%}
{% endfilter %}{%- endmacro request_body_type_string -%}

{%- macro contain_pathparam_with_id(endpoint) -%}{% filter trim %}
{%- for parameter in endpoint.parameters.all -%}
{%- endfor %}
{% endfilter %}{%- endmacro contain_pathparam_with_id -%}

{%- macro parameters(endpoint) -%}
{%- for parameter in endpoint.parameters.all -%}
@{{ parameter.kind | title }}Param("{{ parameter.name }}") {{ self::type(model=parameter.model) }} {{ parameter.name }}{% if not loop.last %}, {% endif %}
{%- endfor %}
{%- endmacro parameters -%}


{%- macro request_arguments(endpoint) -%}
{%- set parameters = self::parameters(endpoint=endpoint) -%}
{%- set request_body = self::request_body_parameter(endpoint=endpoint) -%}
{{ parameters }} {%- if not parameters=="" and not request_body=="" -%}, {%- endif -%} {{ request_body }}
{%- endmacro request_arguments -%}


{% macro endpoint_consumes(endpoint) %}{% filter nospaces %}
{% if endpoint.requestbody %}
@Consumes({
{% for model in endpoint.requestbody.models.all -%}
{% set media_type=self::media_type(content_type=model.contentType) -%}
MediaType.{{ media_type }}{% if not loop.last %}, {% endif %}
{%- endfor %}
})
{% endif %}
{% endfilter %}{% endmacro endpoint_consumes %}

{% macro media_type(content_type) %}{% filter nospaces %}
{{content_type | upper | replace(from="/", to="_") | replace(from="-", to="_")}}
{% endfilter %}{% endmacro media_type %}

{% macro is_primitive(type) %}{% filter nospaces %}{% endfilter %}{% endmacro is_primitive %}

{% macro to_string(q, required, name='') %}{% filter nospaces %}
{% if name != "" %}
{% set real_name = name -%}
{% else %}
{% set real_name = "self." | concat(with=self::property_name(name = q.name)) -%}
{% endif %}
{% if q.type == "enum" %}
    {{ real_name }}.to_string()
{% elif q.type == "string" %}
    {{ real_name }}.clone()
{% else %}
    format!("{}", {{ real_name }})
{% endif %}
{% endfilter %}{% endmacro to_string %}

{% macro to_str(q, name='') %}{% filter nospaces %}
{% if name != "" %}
{% set real_name = name -%}
{% else %}
{% set real_name = "self." | concat(with=self::property_name(name = q.name)) -%}
{% endif %}
{% if q.type == "enum" %}
    {{ real_name }}.to_string().as_ref()
{% elif q.type == "string" %}
    {{ real_name }}.as_ref()
{% else %}
    format!("{}", {{ real_name }}).as_ref()
{% endif %}
{% endfilter %}{% endmacro to_str %}

{% macro enum_variant(name, base) %}{% filter nospaces %}
    {{ name | pascalcase | when_numeric(prefix=base) }}
{% endfilter %}{% endmacro enum_variant %}

{% macro get_validation(validation) %}{% filter nospaces %}
    {% if validation.format and validation.format in ["decimal", "uuid"] %}{% else %}
    {% if validation.maxLength %}length(max = {{ validation.maxLength }}), {% endif %}
    {% if validation.minLength %}length(min = {{ validation.minLength }}), {% endif %}
    {% if validation.minItems %}length(min = {{ validation.minItems }}), {% endif %}
    {% if validation.pattern %}regex="{{ validation.pattern.name | snakecase | upper }}", {% endif %}
    {% if validation.minimum is defined or validation.maximum is defined %}
    range(
        {% if validation.minimum is defined %}min = {{ validation.minimum }}{% if validation.maximum is defined %}, {% endif %}{% endif %}
        {% if validation.maximum is defined %}max = {{ validation.maximum }}{% endif %}
    )
    {% endif %}
    {% endif %}
{% endfilter %}{% endmacro get_validation %}

{% macro type(model) -%}
{% filter nospaces %}
{% if model.x.type %}
    {{ model.x.type }}
{% elif model.type %}
{% if model.type =="number" and not model.validation %}
    {% if model.nullable %}Float{%- else %}float{% endif %}
{% elif model.type =="number" and model.validation.format == "float" %}
    {% if model.nullable %}Float{%- else %}float{% endif %}
{% elif model.type =="number" and model.validation.format == "double" %}
    {% if model.nullable %}Double{%- else %}double{% endif %}
{% elif model.type =="integer" and not model.validation %}
    {% if model.nullable %}Integer{%- else %}int{% endif %}
{% elif model.type =="integer" and model.validation.format == "int32" %}
    {% if model.nullable %}Integer{%- else %}int{% endif %}
{% elif model.type =="integer" and model.validation.format == "int64" %}
    {% if model.nullable %}Long{%- else %}long{% endif %}
{% elif model.type == "string" %}
    {% if model.validation and model.validation.format and model.validation.format == "uuid" %}
    Uuid
    {% elif model.validation and model.validation.format and model.validation.format == "date-time" %}
    LocalDateTime
    {% elif model.validation and model.validation.format and model.validation.format == "date" %}
    LocalDate
    {% else %}
    String
    {% endif %}
{% elif model.type == "boolean" %}
    Boolean
{% elif model.type == "any" %}
    Object
{% elif model.type == "array" and model.model %}
    List<{{ self::type(model = model.model) }}>
{% elif model.type == "map" and model.model %}
    BTreeMap<String, {{ self::type(mode = model.model) }}>
{% elif model.type == "object" and model.model %}
    {{ self::model_name(name = model.model.type) }}
{% elif model.type == "wrapper" and model.model %}
    {{ self::model_name(name = model.model.name) }}
{% elif model.type == "enum" and model.model %}
    {{ self::model_name(name = model.model.name) }}
{% endif %}
{% elif model.object %}
    {{ model.object.name }}
{% endif %}
{% endfilter -%}
{% endmacro type -%}

{% macro do_not_modify() %}
//
// This file is generated from openapi specification. Please do not modify it.
// It should be .gitignored
//
#![allow(warnings)]
#![allow(clippy::all)]
{% endmacro do_not_modify %}

{% macro get_auth_header(security) -%}
{% if security.scheme == 'basic' %}Authorization{% else %}{{ security.name }}{% endif %}
{%- endmacro get_auth_header %}

{% macro endpoint_return(success, endpoint, headers, options) -%}{% filter nospaces %}Result<
    {% if success == "no-models" or success.contentType is not starting_with("application/json") %}
        {% if success.model and success.model.type == "object" and success.model.model and success.model.model.name %}
            {{ self::endpoint_model_response(success = success, headers = headers) }}
        {% elif success.model and success.model.type == "wrapper" and success.model.model and success.model.model.type %}
            {{ self::endpoint_model_response(success = success, headers = headers) }}
        {% else %}
            {{ self::endpoint_default_response(endpoint = endpoint, options = options) }}
        {% endif %}
    {% elif success.model %}
        {{ self::endpoint_model_response(success = success, headers = headers) }}
    {% else %}
    reqwest::Response
    {% endif %},
    {{ self::endpoint_error(endpoint = endpoint, options = options) }}
>{% endfilter %}{%- endmacro skipped_headers %}

{% macro endpoint_model_response(success, headers) -%}
    {% if headers | length > 0 %}({% endif %}
    {{ self::type(property = success.model, ns = "model") }}
    {% if headers | length > 0 %}, reqwest::header::HeaderMap
    ){% endif %}
{%- endmacro endpoint_model_response %}
{% macro endpoint_default_response(endpoint, options) -%}endpoint::{{ endpoint.operation | pascalcase }}Response{%- endmacro endpoint_default_response %}

{% macro endpoint_error(endpoint, options) -%}{% filter nospaces %}
{% if options.errorWrapperType %}{{ options.errorWrapperType }}{% else %}ClientError<{{ self::endpoint_error_body(endpoint = endpoint, options = options) }}>{% endif %}
{% endfilter %}{%- endmacro skipped_headers %}

{% macro endpoint_error_body(endpoint, options) -%}{% filter nospaces %}
{% if options.globalError %}
    {{ options.globalError }}
{% else %}
    endpoint::{{ endpoint.operation | pascalcase }}Error
{% endif %}
{% endfilter %}{%- endmacro skipped_headers %}

{% macro endpoint_map_error(reqwest, endpoint, options) %}{% filter nospaces %}
    ClientError::<{{ self::endpoint_error_body(endpoint = endpoint, options = options) }}>::from_reqwest({{ reqwest }})
{% endfilter %}{% endmacro endpoint_map_error %}

{% macro endpoint_handle_error(response, endpoint, options) %}{% filter nospaces %}
    ClientError::<{{ self::endpoint_error_body(endpoint = endpoint, options = options) }}>::from_response({{ response }}).await
{% endfilter %}{% endmacro endpoint_handle_error %}

{% macro model_to_string(name, property) %}{% filter nospaces %}
{% if property.type == "enum" %}
{{ name }}.to_string()
{% elif property.type == "string" %}
{{ name }}
{% else %}
/* todo */
{% endif %}
{% endfilter %}{% endmacro model_to_string %}

{% macro need_nested_validation(property) %}{% filter nospaces %}
    {% if property.model and property.model.type == "array" and property.model.model %}
        {{ self::need_nested_validation(property = property.model.model) }}
    {% elif property.type != "enum" and not property.x.type and property.model and property.model.type not in [
        "string", "number", "integer", "boolean", "bool", "null", "enum"] %}
        1
    {% endif %}
{% endfilter %}{% endmacro need_nested_validation %}
